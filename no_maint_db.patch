--- odoo/service/db.py	2020-01-22 19:05:09.000000000 -0500
+++ odoo/service/db.pyw	2020-01-22 22:38:56.000000000 -0500
@@ -91,7 +91,7 @@
         _logger.exception('CREATE DATABASE failed:')
 
 def _create_empty_database(name):
-    db = odoo.sql_db.db_connect('postgres')
+    db = odoo.sql_db.db_connect(odoo.tools.config['db_name'])
     with closing(db.cursor()) as cr:
         chosen_template = odoo.tools.config['db_template']
         cr.execute("SELECT datname FROM pg_database WHERE datname = %s",
@@ -120,7 +120,7 @@
 def exp_duplicate_database(db_original_name, db_name):
     _logger.info('Duplicate database `%s` to `%s`.', db_original_name, db_name)
     odoo.sql_db.close_db(db_original_name)
-    db = odoo.sql_db.db_connect('postgres')
+    db = odoo.sql_db.db_connect(odoo.tools.config['db_name'])
     with closing(db.cursor()) as cr:
         cr.autocommit(True)     # avoid transaction block
         _drop_conn(cr, db_original_name)
@@ -161,7 +161,7 @@
     odoo.modules.registry.Registry.delete(db_name)
     odoo.sql_db.close_db(db_name)
 
-    db = odoo.sql_db.db_connect('postgres')
+    db = odoo.sql_db.db_connect(odoo.tools.config['db_name'])
     with closing(db.cursor()) as cr:
         cr.autocommit(True) # avoid transaction block
         _drop_conn(cr, db_name)
@@ -313,7 +313,7 @@
     odoo.modules.registry.Registry.delete(old_name)
     odoo.sql_db.close_db(old_name)
 
-    db = odoo.sql_db.db_connect('postgres')
+    db = odoo.sql_db.db_connect(odoo.tools.config['db_name'])
     with closing(db.cursor()) as cr:
         cr.autocommit(True)     # avoid transaction block
         _drop_conn(cr, old_name)
@@ -371,7 +371,7 @@
 
     chosen_template = odoo.tools.config['db_template']
     templates_list = tuple(set(['postgres', chosen_template]))
-    db = odoo.sql_db.db_connect('postgres')
+    db = odoo.sql_db.db_connect(odoo.tools.config['db_name'])
     with closing(db.cursor()) as cr:
         try:
             cr.execute("select datname from pg_database where datdba=(select usesysid from pg_user where usename=current_user) and not datistemplate and datallowconn and datname not in %s order by datname", (templates_list,))
--- addons/bus/models/bus.py	2020-01-23 16:36:14.000000000 -0500
+++ addons/bus/models/bus.py	2020-01-23 16:50:37.000000000 -0500
@@ -8,12 +8,16 @@
 import time
 
 import odoo
+import odoo.tools
 from odoo import api, fields, models, SUPERUSER_ID
 from odoo.tools.misc import DEFAULT_SERVER_DATETIME_FORMAT
 from odoo.tools import date_utils
 
 _logger = logging.getLogger(__name__)
 
+#Database to use for NOTIFY
+_bus_db = odoo.tools.config['db_name']
+
 # longpolling timeout connection
 TIMEOUT = 50
 
@@ -60,7 +64,7 @@
             # transaction is not commited yet, there will be nothing to fetch,
             # and the longpolling will return no notification.
             def notify():
-                with odoo.sql_db.db_connect('postgres').cursor() as cr:
+                with odoo.sql_db.db_connect(self._bus_db).cursor() as cr:
                     cr.execute("notify imbus, %s", (json_dump(list(channels)),))
             self._cr.after('commit', notify)
 
@@ -108,6 +112,7 @@
     def __init__(self):
         self.channels = {}
         self.started = False
+        self._bus_db = odoo.tools.config['db_name']
 
     def poll(self, dbname, channels, last, options=None, timeout=TIMEOUT):
         if options is None:
@@ -160,8 +165,8 @@
 
     def loop(self):
         """ Dispatch postgres notifications to the relevant polling threads/greenlets """
-        _logger.info("Bus.loop listen imbus on db postgres")
-        with odoo.sql_db.db_connect('postgres').cursor() as cr:
+        _logger.info("Bus.loop listen imbus on db {db}".format(db=self._bus_db))
+        with odoo.sql_db.db_connect(self._bus_db).cursor() as cr:
             conn = cr._cnx
             cr.execute("listen imbus")
             cr.commit();
